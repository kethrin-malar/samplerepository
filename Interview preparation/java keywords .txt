String: 
It is a sequence of characters. In Java, objects of String are immutable which means a constant and cannot be changed once created.
EX:String greeting = "Hello world!"; 
String Buffer  , String Bulider are mutable class.
diff between String Buffer  , String Bulider
1.StringBuffer is thread-safe and synchronized 
2.StringBuffer slower.

String Bulider:Not thread-safe and synchronized 
StringBuilder is faster than StringBuffer.

nested class:it is possible to define a class within another class, such classes are known as nested classes. 
They enable you to logically group classes that are only used in one place, thus this increases the use of encapsulation and creates more 
readable and maintainable code.

 inner classes:
 Non-static nested classes (inner classes) have access to other members of the enclosing class, even if they are declared private.
 Static nested classes:-
 Static nested classes do not have access to other members of the enclosing class.

Anonymous Class:-
In Java, a class can contain another class known as nested class. It's possible to create a nested class without giving any name.

A nested class that doesn't have any name is known as an anonymous class.

An anonymous class must be defined inside another class. Hence, it is also known as an anonymous inner class. Its syntax is:

class outerClass {

    // defining anonymous class
    object1 = new Type(parameterList) {
         // body of the anonymous class
    };
}

Local Classes:-
Local classes are classes that are defined in a block, which is a group of zero or more statements between balanced braces. 
You typically find local classes defined in the body of a method.

Inheritance :-
Inheritance in Java is the method to create a hierarchy between classes by inheriting from other classes.


package:
A set of classes and interfaces grouped together are known as Packages in JAVA. The name itself defines that pack (group) of related types such as classes, 
sub-packages, enumeration, annotations, and interfaces that provide name-space management.


instance variable:-
Instance variables in Java are non-static variables which are defined in a class outside any method, constructor or a block. 
Each instantiated object of the class has a separate copy or instance of that variable.
An instance variable belongs to a class.
 
 
class variable:-
Fields that have the static modifier in their declaration are called static fields or class variables. 
They are associated with the class, rather than with any object.



Local Variable:-
The Local Variable is specified in the programming block or subroutines as a form of variable declared. The local variable persists before the function's block is executed. It will be lost automatically after that.

Example of Local Variable

public int sum(){  
int x =4;  
int y=5;  
return x+y;  
}  


Global Variable
A variable that is specified outside the function or block of the code is known as Global Variable. 
It has a global reach, which means it retains its relevance over the program's lifespan. 
Therefore, any feature specified within the programme can access it within the programme, unless it is shadowed.
Example:
int x =4;  
int y=5;  
public int add(){  
return x+y;  
}  

package sample;


public class LongestNiceSubstring {
	
	    public static boolean isNice(String s) {
	        boolean[] lowerCasePresent = new boolean[26];
	        boolean[] upperCasePresent = new boolean[26];

	        for (char c : s.toCharArray()) {
	            if (!Character.isLetter(c)) {
	                return false;
	            }
	            if (Character.isLowerCase(c)) {
	                lowerCasePresent[c - 'a'] = true;
	            } else {
	                upperCasePresent[c - 'A'] = true;
	            }
	        }

	        for (int i = 0; i < 26; i++) {
	            if (lowerCasePresent[i] != upperCasePresent[i]) {
	                return false;
	            }
	        }

	        return true;
	    }

	    public static void main(String[] args) {
	        String s1 = "ABCxyz";     // false
	        String s2 = "cC";         // true
	        String s3 = "aAbB";       // true
	        String s4 = "aAbB123";    // false
	        String s5 = "aAbBcDdCE";  // false

	        System.out.println("s1 is ABCxyz? " + isNice(s1));
	        System.out.println("s2 is cC? " + isNice(s2));
	        System.out.println("s3 is aAbB? " + isNice(s3));
	        System.out.println("s4 is aAbB123? " + isNice(s4));
	        System.out.println("s5 is aAbBcDdCE? " + isNice(s5));
	    }
	}
sliding window technique:To know, Where we use the Sliding Window then we remember the following terms which is mentioned below:

Array, String, Sub Array, Sub String, Largest Sum, Maximum Sum, Minimum Sum


12/12/23=>self-join
SELECT 
    t1.EID,
    t2.AVALUE AS code,
    t1.ANAME,
    t1.AVALUE
FROM 
    your_table_name t1
JOIN 
    your_table_name t2 ON t1.EID = t2.EID
WHERE 
    t2.ANAME = 'code'
	
	
	SELECT t1.Eid, t1.AVALUE AS CODEName, t2.ANAME, t2.AVALUE
FROM code t1, code t2
WHERE t1.Eid = t2.Eid
  AND t1.ANAME = 'CODE' AND t1.AVALUE = 'C1'
  AND t2.ANAME IN ('A1', 'A2', 'A3')
  
  https://www.wikitechy.com/tutorials/oracle/oracle-self-join





SELECT * FROM leetcode.lowfatproduct;
INSERT INTO lowfatproduct(productId,lowfats,recyclable) VALUES (5,'Y','Y');
SELECT productid FROM lowfatproduct WHERE lowfats='Y' AND recyclable='Y';


SELECT * FROM leetcode.swapsalary;
INSERT INTO swapsalary (id, name, sex, salary) VALUES (1, 'A', 'm', 65000);
INSERT INTO swapsalary (id, name, sex, salary) VALUES (2, 'B', 'f', 36500);
INSERT INTO swapsalary (id, name, sex, salary) VALUES (3, 'C', 'm', 56500);
INSERT INTO swapsalary (id, name, sex, salary) VALUES (4, 'D', 'f', 46500);

UPDATE swapsalary
SET sex = CASE
    WHEN sex = 'f' THEN 'm'
    WHEN sex = 'm' THEN 'f'
    ELSE sex
    END
WHERE id IN (1, 2, 3, 4); 


SELECT * FROM leetcode.producttbl;
select productid ,'store1' as store,store1 as price 
from producttbl 
where store1 is not null
UNION ALL
select productid ,'store2' as store,store2 as price 
from producttbl 
where store2 is not null
UNION ALL
select productid ,'store3' as store,store3 as price 
from producttbl 
where store3 is not null;
//union all command using for two or more select queries combine the result.
//The AS command is used to rename a column or table with an alias. An alias only exists for the duration of the query.
SELECT column_name1, column_name2,...
FROM tables
[WHERE Condition]
UNION ALL
    SELECT column_name1, column_name2, ...
    FROM tables
    [WHERE Condition];
	
	
	
	
	
	
	
	
	
	
	
	
	String s1 = "ABCxyz"; // false
		String s2 = "cC"; // true
		String s3 = "aAbB"; // true
		String s4 = "aAbb123"; // false
		String s5 = "aAbBcDdCE"; // false

		System.out.println(isNice(s1));
		System.out.println(isNice(s2));
		System.out.println(isNice(s3));
		System.out.println(isNice(s4));
		System.out.println(isNice(s5));
	}

	public static boolean isNice(String s) {
		for (char c = 'A'; c <= 'Z'; c++) {
			boolean hasUpperCase = false;// true
			boolean hasLowerCase = false;// false

			char upperCase = c; // ex:s1="A"  uppercase s2="cC"
			char lowerCase = Character.toLowerCase(c);// lower case=a ,lower case=c

			for (int i = 0; i < s.length(); i++) { //s1->i=A,i=B ,s2->i=c

				char currentChar = s.charAt(i);
				if (currentChar == upperCase) {// A==A ->true,B==A->false,s2->c==C->false,C==C->true
					hasUpperCase = true; 
				} else if (currentChar == lowerCase) { // x==a->false,y==b->false,s2->c==c->true,C==c->false
					hasLowerCase = true; // true
				}
			}
              
			if (hasUpperCase != hasLowerCase) { //C!=c=>return false
				return false;
			}
		}
		return true;
	}
}

/*
 * Ex: s1 = "ABCxyz"; char upperCase=A; char lowerCase=a; Boolean hasUpperCase=
 * true; boolean hasLowerCase = false; is not nice string the correcponding
 * string class lowercase a is present so boolean lowercase is fail.
 * 
 * Ex: String s3 = "aAbB"; char upperCase=A; char lowerCase=a; Boolean
 * hasUpperCase= true; boolean hasLowerCase = true; for(i=0;i<s.length;i++) {
 * i=a char currentChar = s.charAt(i);//a if (currentChar == upperCase) { //A==A
 * hasUpperCase = true; //true } else if (currentChar == lowerCase) { //a==a
 * hasLowerCase = true; //true } 
 * }
 */













