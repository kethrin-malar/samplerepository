1.Serialization:
The serialization process in Java transforms an Object code into a byte stream, which can be copied from one Java Virtual Machine to another and recreated by 
deserialization.

2.De Serialization:
De Serialization is the process of transforming the byte stream into a Java object in memory.

3.Transient Variable in Java
A transient variable is a special type of variable which we create by using the transient keyword. It is a special type of variable which have 
a non-serialized value at the time of serialization. A variable that is initialized by its default value during de-serialization is known as a 
transient variable.

A transient variable plays an important role in preventing an object from being serialized. We can make any variable transient by using the transient keyword.

Usually, the interviewer asks the difference between the volatile and the transient variable. So, the volatile and the transient variables are 
both different from each other. The transient keyword is mainly used at the time of serializing an object, while the volatile keyword is related to the 
visibility of variables that are modified by multiple threads at the time of concurrent programming.

->Volatile keyword is used to modify the value of a variable by different threads. It is also used to make classes thread safe. It means that multiple threads
can use a method and instance of the classes at the same time without any problem. 
The volatile keyword can be used either with primitive type or objects.

import java.io.*;      
public class Student implements Serializable{    
 int id;    
 String name;    
 transient int age;//Now it will not be serialized    
 public Student(int id, String name,int age) {    
  this.id = id;    
  this.name = name;    
  this.age=age;    
 }    
}    
class PersistExample{    
 public static void main(String args[])throws Exception{    
  Student s1 =new Student(211,"ravi",22);//creating object    
  //writing object into file    
  FileOutputStream f=new FileOutputStream("f.txt");    
  ObjectOutputStream out=new ObjectOutputStream(f);    
  out.writeObject(s1);    
  out.flush();    
  out.close();    
  f.close();    
  System.out.println("success");    
 }    
} 

4.What is marker interface?
An interface that does not contain methods, fields, and constants is known as marker interface. In other words, an empty interface is known as marker interface
or tag interface. It delivers the run-time type information about an object.  
Syntax:
public interface Serializable   
{  
  
} 

Kinds of Method References

There are four kinds of method references:

Kind	                                                                          Syntax	                                                          Examples
Reference to a static method	                                           ContainingClass::staticMethodName	                                 Person::compareByAge
MethodReferencesExamples::appendStrings
Reference to an instance method of a particular object	                   containingObject::instanceMethodName	                                myComparisonProvider::compareByName
                                                                                                                                                myApp::appendStrings2
Reference to an instance method of an arbitrary object of a particular type 	ContainingType::methodName	                                    String::compareToIgnoreCase
                                                                                                                                                String::concat
Reference to a constructor	                                                      ClassName::new	                                            HashSet::new

5.Shallow Copy	                                                                                Deep Copy
It is fast as no new memory is allocated.	                             It is slow as new memory is allocated.
Changes in one entity is reflected in other entity.	                     Changes in one entity are not reflected in changes in another identity.
The default version of the clone() method supports shallow copy.	     In order to make the clone() method support the deep copy, one has to override the clone() method.
A shallow copy is less expensive.	                                     Deep copy is highly expensive.


6.what is generics: it is a parameterized overtype
Java Generics is a feature in Java that allows for type safety and improved code reusability. 
->Use generic types to maximize code reuse, type safety, and performance. 
->Generics enable the use of stronger type-checking, the elimination of casts, and the ability to develop generic algorithms. 
Without generics, many of the features that we use in Java today would not be possible.

Advantage:-
Type safety. ...
Less code and code is more easily reused. ...
Better performance. ...
Generic delegates enable type-safe callbacks without the need to create multiple delegate classes. ...
Generics streamline dynamically generated code.

*7.java reflection api Why it’s so important to have?
Java reflection is an API used to inspect and modify Java classes, fields, methods, and constructors at runtime.

java.lang.Class class
The java.lang.Class class performs mainly two tasks:

provides methods to get the metadata of a class at run time.
provides methods to examine and change the run time behavior of a class.

*8.What is Type Erasure?
Replacing all parameters type in the generic types with the bounds or Object when the type of the parameters is not bounded. 
The generated bytecode, hence, only contains the ordinary methods, interfaces, and classes.

9.Heap memory:

Heap for dynamic memory allocation.
Memory access is slow.

Static memory:
Stack is used for static memory allocation.
Variables allocated on the stack are stored directly into the memory and access to this memory is very fast.

10.Why is Java not a purely object-oriented language? Java is not a fully object-oriented language as it supports primitive data types like int, byte, long, 
short, etc., which are not objects. Hence these data types like int, float, double, etc., are not object-oriented. That's why Java is not 100% object-oriented.

11.Is Java “pass-by-reference” or “pass-by-value”?
A simple Google search of this question will return a straightforward answer that Java is always pass-by-value. 
Pass by value in java means passing a copy of the value to be passed. Pass by reference in java means the passing the address itself.

12.What is multiple inheritance? Is it supported by Java?
It allows a class to inherit the fields (variables) and methods of another class. In Java, this is achieved using the extends keyword. In this code, 
the Child class inherits from the Parent class, thus inheriting the method() of the Parent class. However, Java doesn't support multiple inheritance in classes.

13.What is association vs aggregation vs composition ?

Association:Association in Java is a connection or relation between two separate classes that are set up through their objects. Association relationship 
indicates how objects know each other and how they are using each other's functionality. It can be one-to-one, one-to-many, many-to-one, and many-to-many.
aggregation:it is loosely coupled
composition:it is tightly coupled.

14.Can you override a private or static method in Java?
Similarly, you cannot override a private method in sub class because it's not accessible there.
Static methods in Java cannot be overridden. This is because static methods are not associated with the instance of a class, but with the class itself.

14.Rules of Method Overriding in Java?
The method name should be common and the same as it is in the parent class.
The method signature (parameter list, return type) in the method must be the same as in the parent class.
There must be an inheritance connection between classes.

15.

16.What is the need of Serialization?
Usually used in Hibernate, JMS, JPA, and EJB, serialization in Java helps transport the code from one JVM to another and then de-serialize it there. Deserialization is the exact opposite process of serialization where the byte data 
type stream is converted back to an object in the memory.

17.What is use of serialVersionUID?
SerialVersionUID. The serialization process at runtime associates an id with each Serializable class which is known as SerialVersionUID.
It is used to verify the sender and receiver of the serialized object. The sender and receiver must be the same.To verify it, SerialVersionUID is used.

18.What if Serialization is not available, is any any other alternative way to transfer object over network?
A good alternative is using JSON.
JSON stands for JavaScript Object Notation
JSON is a lightweight format for storing and transporting data
JSON is often used when data is sent from a server to a web page
JSON is "self-describing" and easy to understand

19.When is Garbage Collection run?
JVM runs the garbage collector if it senses that memory is running low. 
In Java, garbage collection is triggered automatically by the JVM (Java Virtual Machine) when it determines that the heap is getting full or
 when a certain amount of time has passed.
 
20.Can you explain Garbage Collection with an example?
In Java, garbage collection is the process of managing memory, automatically. It finds the unused objects (that are no longer used by the program) and delete or remove them to free up the memory. 
public static void gc(){}  
protected void finalize(){}  


21.What is a Lower Bounded Wildcard and Upper Bounded Wildcard in Generics
Wildcards
The question mark (?) is known as the wildcard in generic programming. It represents an unknown type.
The wildcard can be used in a variety of situations such as the type of a parameter, field, or local variable; 

Upper bound wildcard − If a variable is of in category, use extends keyword with wildcard. 
Lower bound wildcard − If a variable is of out category, use super keyword with wildcard. 
Unbounded wildcard − If a variable can be accessed using Object class method then use an unbound wildcard.


22.How can you mark an array volatile in Java?
In Java, you cannot mark an entire array as volatile. The volatile keyword in Java is used to indicate that a variable's value might be modified asynchronously
by concurrently running threads.It ensures visibility of changes made by one thread to other threads.

public class Example {
    private volatile int[] array;
	
23.Is it possible to break out of nested loops in Java?
To break out of nested loops in Java, you can use the break statement. The break statement terminates the innermost loop that it is contained in, 
and transfers control to the statement immediately following the loop.
public class NestedLoopExample {
    public static void main(String[] args) {
        outerLoop: // Label for the outer loop
        for (int i = 0; i < 5; i++) {
            for (int j = 0; j < 5; j++) {
                System.out.println("i: " + i + ", j: " + j);
                if (j == 3) {
                    break outerLoop; // Breaks out of the outer loop
                }
            }
        }
    }
}


25.Using String Literal
String str1 = "Python";

String str2 = "Data Science";

String str3 = "Python";

Using new Keyword
In Java, a new keyword is also used to create String, as follows:

String str1 = new String ("Java");

26.String constant pool:
String pool is nothing but a storage area in Java heap where string literals stores. It is also known as String Intern Pool or String Constant Pool.
It is just like object allocation.

27.What do you mean by mutable and immutable objects in Java?
A mutable object can be changed after it's created, and an immutable object can't. In Java, everything (except for strings) is mutable by default


28.What is an Immutable Object?
An object is immutable when its state doesn't change after it has been initialized. For example, String is an immutable class and, once instantiated, 
the value of a String object never changes.

Can you write an Immutable Class:
The following things are essential for creating an immutable class: Final class, which is declared as final so that it can't be extended. 
All fields should be private so that direct access to the fields is blocked. 
No Setters.

29.Difference b'w String and StringBuffer and StringBuilder?

String Buffer	
1.It is synchronized i.e. only one thread can enter an object at any point of time.	
2.It is Thread safe. Multiple threads can’t enter the object simultaneously. 
3.Because of the above reason String Bufferis slower	
String Builder
1.It is asynchronized i.e., multiple threads can enter the object at any point of time.
2.OneThread has to wait until another thread has finished with them.	It is not Thread safe i.e. multiple threads can enter the object parallel. 
Threads don’t have to wait until one thread is finished.
3.String builder is faster as a result of this.


30.Why String is immutable or final in Java?
The String is immutable in Java because of the security, synchronization and concurrency, caching, and class loading. The reason of making string final 
is to destroy the immutability and to not allow others to extend it.
The String objects are cached in the String pool, and it makes the String immutable.

31.Why Char array is preferred over String for storing password?
"Using a char array over a String for storing passwords in Java is preferred because String objects are immutable, meaning they cannot be changed once created.
This immutability poses a security risk as strings containing sensitive information, like passwords, may linger in memory longer than necessary. 
On the other hand, a char array allows for explicit zeroing out of the password after its use, enhancing security by reducing the risk of exposure in memory."

32.Why String is final in Java or why string objects are immutable?
The string is immutable means that we cannot change the object itself, but we can change the reference to the object. The string is made final 
to not allow others to extend it and destroy its immutability.

33.What are differences between Exception and Error in java?
1.exception can be recovered                                 error cannot be recovered
2.Exception can be classified two types                      Error no classification,error always unchecked 
checked Exception,unchecked Exception
3.checked exception compiler knowledge of checked exception  error cannot be knowledge in compiler


34..What is the purpose of the throw and throws keywords?
The 'throw' keyword is used to explicitly throw an exception from within a block of code or a method. 
The 'throws' keyword is used in the method signature to declare the exceptions that a method can potentially throw.

35.What is the difference between a checked and an unchecked exception?
Checked exceptions happen at compile time when the source code is transformed into an executable code. 
Unchecked exceptions happen at runtime when the executable program starts running.

36.Give some examples to checked exceptions and unchecked exceptions?
Unchecked exception(Run time exception)
ArithmaticException
NullPointException
InputMismatchException
ArrayIndexOutOfBoundExcepion
StringIndexOutOfBoundExcepion
IndexOutOfBoundExcepion
NumberFormatException

Checked exception(Compile time exception)
IOException
SQLException
FileNotFoundException

37.What is difference between final, finally and finalize in Java?
Final:
A final class variable whose value cannot be changed.
A final is declared as class level, they cannot be inherited.
If the final is declared as method level, they cannot be overridden.

 Finally:
It’s a block of statements that definitely executes after the try-catch block.
If the try block fails means, the final block will execute once.

Finalize:
It will clean up processing memory space.

38.***The Throw keyword is used inside a method. Whereas the Throws keyword is used in the method signature. ***

39.How do you create customized exceptions in java?
Access_specifier method_name throws customException { throw new customException();
}

40.What are the 5 exception keywords in Java?
The exception handling fundamentals in Java revolve around the five keywords- try, catch, finally, throw, and throws. 

41.Does “finally” always execute in Java?
Yes,it always executes except if you are not forcing the program to exit itself using system. exit(or something similar) code in your try block. 
In that case your whole program will stop and finally will not run.

42.What will happen when catch and finally block both return value, also when try and finally both return value in java?
The finally block will still execute, even if the catch block has a return statement. If both catch and finally return, 
the receiving method will get the returned value from the finally block.

When try and finally block both return value, method will ultimately return value returned by finally block irrespective of value returned by try block.

54.different between Iterator and ListIterator?
Iterator is a universal interface used to traverse any collection, while ListIterator is specific to lists and provides bidirectional iteration. 
Iterator supports only forward iteration with next(). On the other hand, ListIterator supports both forward and backward iteration with next() and previous().

55.difference between fail-fast and fail-safe?
Fail-Fast systems abort operation as-fast-as-possible exposing failures immediately and stopping the whole operation. 
Whereas, Fail-Safe systems don't abort an operation in the case of a failure. 
Such systems try to avoid raising failures as much as possible.

56.How to avoid ConcurrentModificationException while iterating a collection?

57.difference between HashMap and Hashtable?
Hashmap:
It is not thread-safe and can't be shared between many threads without proper synchronization code 
HashMap allows one null key and multiple null values 

Hashtable:
whereas Hashtable is synchronized. 
It is thread-safe and can be shared with many threads. 
whereas Hashtable doesn't allow any null key or value.

58.difference between ArrayList and Vector?
Arraylist:
not synchronized,it is parallel
not thread safe

Vector:
synchronized
thread safe

59.difference between Array and ArrayList?
Arrays are fixed-size collections of elements, while ArrayLists are dynamic and resizable collections of elements. 
Arrays can only contain elements of a specific data type, while ArrayLists can hold elements of any data type.

61.difference between LinkedList and ArrayList.
LinkedList:
Insertion and deletion is the best one.
Searching/retrieving is the worst.
It makes performance issue.

ArrayList:
In Arraylist retrieve/searching is the best one
In ArrayList deletion and insertion is the worst one because if we delete/insert one index value after all the index move to forward/backward.
It makes performance issue.



62.How to Avoid ConcurrentModificationException?
Use a synchronized collection: You can use a synchronized collection, such as Collections. ...
Use a lock: You can use a lock to ensure that only one thread can access the collection at a time.


63.What is Comparable and Comparator interface?
Comparable:
 Comparable provides a single sorting sequence
 Comparable affects the original class,
 Comparable provides compareTo() method to sort elements.
 Comparable is present in java.lang package.
 
 Comparator:
 The Comparator provides multiple sorting sequences.
 Comparator doesn't affect the original class,
 Comparator provides compare() method to sort elements.
 A Comparator is present in the java.util package.
 
64.What is hash collision?
Collision occurs when a newly added key corresponds to a hash table slot that is already taken, and it needs to be handled using a collision handling mechanism.

65.Can we use any class as Map key?
We can conclude that to use a custom class for a key, it is necessary that hashCode() and equals() are implemented correctly. 

66.How Hashmap works internally?
HashMap use singly linked list to store elements, these are called bins or buckets.
hashCode is used to check if there is already a key with same hashCode or not.

67.When do you override hashCode() and equals()?
As per the Java documentation, both the methods should be overridden to get the complete equality mechanism; using equals() alone is not sufficient.
 It means, if we override the equals(), we must override the hashcode() method.
 
68.How to make the list unmodifiable?
If you create a List and pass it to the Collections. unmodifiableList method, then you get an unmodifiable view.

69.HashMap vs ConcurrentHashMap?

Hashmap:
1.key, value pair is there
2.non-syncyronized
3.not-thread safe
4.fail-fast

concurrentHashMap:
1.no key ,value pairs
2.syncyronized
3.thread safe
4.fail-safe

71.Java SE 8 New Features?
Lambda Expressions.
Functional Interfaces.
Method Reference.
Streams.
Comparable and Comparator.

72.What is Lambda Expression?
It is one unimplemented method,using @FunctionalInterface Keyword
73.What is a Functional Interface?
An Interface that contains exactly one abstract method is known as functional interface.

74.What is Stream API?
stream example
// Main driver method
    public static void main(String[] args)
    {
        // Creating an empty Arraylist
        List<String> companyList = new ArrayList<>();
 
        // Adding elements to above ArrayList
        companyList.add("Google");
        companyList.add("Apple");
        companyList.add("Microsoft");
 
        // Sorting the list
        // using sorted() method and
        // printing using for-each loop
        companyList.stream().sorted().forEach(
            System.out::println);
    }
}


75.Collection vs Collections in Java
Collection is called interface in java 
whereas Collections is called a utility class in java
 and both of them can be found in java.util.package.
Collection is used to represent a single unit with a group of individual objects 
whereas collections is used to operate on collection with several utility methods.
Since java 8, collection is an interface with static as well as abstract and default methods 
whereas collections operate only with static methods.


76.@funtional interface Example
@FunctionalInterface
 
interface Square {
    int calculate(int x);
}
 
class Test {
    public static void main(String args[])
    {
        int a = 5;
 
        // lambda expression to define the calculate method
        Square s = (int x) -> x * x;
 
        // parameter passed and return type must be
        // same as defined in the prototype
        int ans = s.calculate(a);
        System.out.println(ans);
    }
}




singlton:A Singleton class is a class that allows only one instance of itself to be created and provides a global point of access to that instance. This is achieved by making the constructor private, 
so that no other instances of the class can be created, and providing a static method that returns the single instance of the class.

spring:
Spring is a lightweight open-source Java development framework.
features:Spring Boot Features
Web Development.
SpringApplication.
Application events and listeners.

Which are the Spring framework modules?
Data access/Integration.
Web (MVC/Remoting)
AOP (Aspect-oriented programming)
Aspects.
Instrumentation.
Core container.
Test.

What do you understand by Dependency Injection?
Dependency injection is used to make a class independent of its dependencies or to create a loosely coupled program.
Dependency injection is useful for improving the reusability of code.

What is a Spring Bean?
the objects that form the backbone of your application and that are managed by the Spring IoC container are called beans.

What is Spring IOC container?
Spring IoC container is the program that injects dependencies into an object and make it ready for our use. 

What is the importance of Spring bean configuration file?
We use the Spring Bean configuration file to define all the beans that will be initialized by Spring Context. 
When we create the instance of Spring ApplicationContext, it reads the spring bean XML file and initializes all of them.

Explain Bean lifecycle in Spring framework?
the life cycle of spring framework first initialized after process is completed it will be destroyed.


thread groups,thread:Every Java thread is a member of a thread group. Thread groups provide a mechanism for collecting 
multiple threads into a single object and manipulating those threads all at once, rather than individually.
 For example, you can start or suspend all the threads within a group with a single method call.
WSL download
write a program take list of cites of command line arguments print those list
sysout

path,class path:The main difference between PATH and CLASSPATH is that Path is set for java tools in java programs like java and javac,
which are used to compile your code.
Whereas CLASSPATH is used by System or Application class loader to locate and load compile Java bytecodes stored in the . class file

collection of interface
set,list:A list can contain duplicate elements whereas Set contains unique elements only.