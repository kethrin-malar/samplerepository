1.Class:class is nothing but a bliue print.creating an object
2.object.object is nothing but instance of the class
3.abstract class:using abstact keyword,abstract class using multiple methods
EX:abstract class Animal {
    abstract void makeSound();
    abstract void move(); // New abstract method

    public void eat() {
        System.out.println("I can eat.");
    }
}

class Dog extends Animal {
    // Provide implementation of abstract method
    public void makeSound() {
        System.out.println("Bark bark");
    }

    // Provide implementation of abstract method
    public void move() {
        System.out.println("Dog is walking.");
    }
}

class Main {
    public static void main(String[] args) {
        // Create an object of Dog class
        Dog d1 = new Dog();

        d1.makeSound();
        d1.move();
        d1.eat();
    }
}

4.interface:using interface keyword,multiple class using interface,multiple method does not aloved using multiple method using default keyword.
abstract&interface doesn't create instance.
5.final class:does not extend it,
Final keyword:does not change it,
final method:Method overriding
6.this keyword:The this keyword refers to the current object in a method or constructor. 
The most common use of the this keyword is to eliminate the confusion between class attributes and parameters with the same name.
7.super keyword:The super keyword refers to superclass (parent) objects.The most common use of the super keyword is to eliminate the
confusion between superclasses and subclasses that have methods with the same name.

class Animal{  
String color="white";  
}  
class Dog extends Animal{  
String color="black";  
void printColor(){  
System.out.println(color);//prints color of Dog class  
System.out.println(super.color);//prints color of Animal class  
}  
}  
class TestSuper1{  
public static void main(String args[]){  
Dog d=new Dog();  
d.printColor();  
}}  

8.inner class:java inner class is nothing but inside the class or interface.
9.anonymous inner class:
Java anonymous inner class is an inner class without a name and for which only a single object is created.

abstract class Person{  
  abstract void eat();  
}  
class TestAnonymousInner{  
 public static void main(String args[]){  
  Person p=new Person(){  
  void eat(){System.out.println("nice fruits");}  
  };  
  p.eat();  
 }  
}  

10.static variable:only one copy of entire class,static method:without creating instance of the class.
11.instance variable:public string name;
instance method:Instance methods are the methods defined under a class and we can call such functions only after creating an object of that class. 
In fact, the call to the instance method is made through the created object itself.

12.PATH and CLASSPATH is that Path is set for java tools in java programs like java and javac, which are used to compile your code. 
Whereas CLASSPATH is used by System or Application class loader to locate and load compile Java bytecodes stored in the . class file.

13.Stream:Java streams represent a pipeline through which data will flow and the functions to operate on the data. 
A pipeline in this instance consists of a stream source, followed by zero or more intermediate operations, and a terminal operation.

14.log4j:Log4j is used in Java for logging purposes. It helps developers to easily generate log files with different levels of severity
(DEBUG, INFO, WARN, ERROR, FATAL) and direct them to various outputs like console, files, databases, etc. It offers 
flexible configuration, high performance, and seamless integration with Java applications, making it a preferred choice for logging in the Java ecosystem.

15.Fork join:Fork/Join in Java is used to make use of the cores (brain of CPU that process the instructions) in an efficient manner. The fork/join splits a bigger task into smaller sub-tasks.
 These sub-tasks are then distributed among the cores. The results of these subtasks are then joined to generate the final result. The splitting of a task and joining the results imitates the divide-and-conquer algorithm.

16.Deadlock in java is a programming situation where two or more threads are blocked forever. 
17.A thread is a thread of execution in a program. 

