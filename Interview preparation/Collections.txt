***Assignment:-single conection object,3 threads .DAO class****

Collection:
The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.
Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.
Java Collection means a single unit of objects. Java Collection framework provides many interfaces (Set, List, Queue, Deque)
and classes (ArrayList, Vector, LinkedList, PriorityQueue, HashSet, LinkedHashSet, TreeSet).

1.ArrayList:
Java ArrayList class uses a dynamic array for storing the elements. It is like an array, but there is no size limit. 
We can add or remove elements anytime. So, it is much more flexible than the traditional array. It is found in the java.util package. 
Declaration:
public class ArrayList<E> extends AbstractList<E> implements List<E>, RandomAccess, Cloneable, Serializable  

Example:import java.util.*;  
 public class ArrayListExample1{  
 public static void main(String args[]){  
  ArrayList<String> list=new ArrayList<String>();//Creating arraylist    
      list.add("Mango");//Adding object in arraylist    
      list.add("Apple");    
      list.add("Banana");    
      list.add("Grapes");    
      //Printing the arraylist object   
      System.out.println(list);  
 }  
}  Output:

[Mango, Apple, Banana, Grapes]

2.LinkedList:
Java LinkedList class uses a doubly linked list to store the elements. It provides a linked-list data structure. 
It inherits the AbstractList class and implements List and Deque interfaces.
->public class LinkedList<E> extends AbstractSequentialList<E> implements List<E>, Deque<E>, Cloneable, Serializable 

The important points about Java LinkedList are:
Java LinkedList class can contain duplicate elements.
Java LinkedList class maintains insertion order.
Java LinkedList class is non synchronized.
In Java LinkedList class, manipulation is fast because no shifting needs to occur.
Java LinkedList class can be used as a list, stack or queue.

3.Difference Arraylist                                                                         LinkedList
ArrayList internally uses a dynamic array to store the elements.                 LinkedList internally uses a doubly linked list to store the elements.
Manipulation with ArrayList is slow                                              Manipulation with LinkedList is faster
An ArrayList class can act as a list only because it implements List only.       LinkedList class can act as a list and queue both
ArrayList is better for storing and accessing data.                              LinkedList is better for manipulating data.

import java.util.*;    
class TestArrayLinked{    
 public static void main(String args[]){    
     
  List<String> al=new ArrayList<String>();//creating arraylist                    List<String> al2=new LinkedList<String>();//creating linkedlist     
  al.add("Ravi");//adding object in arraylist                                     al2.add("James");//adding object in linkedlist 
  al.add("Vijay");                                                                al2.add("Serena"); 
  al.add("Ravi");                                                                 al2.add("Swati");  
  al.add("Ajay");                                                                 al2.add("Junaid");  
  System.out.println("arraylist: "+al);  
  System.out.println("linkedlist: "+al2);  
 }    
}    

Output:
arraylist: [Ravi,Vijay,Ravi,Ajay]
linkedlist: [James,Serena,Swati,Junaid]

4.List Interface:
List in Java provides the facility to maintain the ordered collection. 
It contains the index-based methods to insert, update, delete and search the elements. 
It can have the duplicate elements also.
We can also store the null elements in the list.
The implementation classes of List interface are ArrayList, LinkedList, Stack and Vector.

5.Hashset:
HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
HashSet allows null value.
HashSet class is non synchronized.
HashSet doesn't maintain the insertion order. Here, elements are inserted on the basis of their hashcode.
HashSet is the best approach for search operations.

6.LinkedHashSet:public class LinkedHashSet<E> extends HashSet<E> implements Set<E>, Cloneable, Serializable  
Java LinkedHashSet class is a Hashtable and Linked list implementation of the Set interface. It inherits the HashSet class and implements the Set interface.

The important points about the Java LinkedHashSet class are:
Java LinkedHashSet class contains unique elements only like HashSet.
Java LinkedHashSet class provides all optional set operations and permits null elements.
Java LinkedHashSet class is non-synchronized.
Java LinkedHashSet class maintains insertion order.


7.TreeSet:
Java TreeSet class contains unique elements only like HashSet.
Java TreeSet class access and retrieval times are quite fast.
Java TreeSet class doesn't allow null elements.
Java TreeSet class is non-synchronized.
Java TreeSet class maintains ascending order.
The TreeSet can only allow those generic types that are comparable. For example The Comparable interface is being implemented by the StringBuffer class.

TreeSet<String> al=new TreeSet<String>();  
  al.add("Ravi");  
  al.add("Vijay");  
  al.add("Ravi");  
  al.add("Ajay");  
  //Traversing elements  
  Iterator<String> itr=al.iterator();  
  while(itr.hasNext()){  
   System.out.println(itr.next());  
  }  
 }  
}  output:
Ajay
Ravi
Vijay

8.Queue & priorityQueue:
