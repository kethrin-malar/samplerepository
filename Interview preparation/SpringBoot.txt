singletone,@component->using business class it is parent class,spring+boot=springBoot,http://8080


what is maven?
Maven is Automation tool and manange the project structure.pom.xml add the depencies.


1.Spring boot:
Spring Boot is a project that is built on the top of the Spring Framework. It provides an easier and faster way to set up, configure, 
and run both simple and web-based applications.
->It is a Spring module that provides the RAD (Rapid Application Development) feature to the Spring Framework. It is used to create a 
stand-alone Spring-based application that you can just run because it needs minimal Spring configuration.
->Spring Boot is the combination of Spring Framework and Embedded Servers.

2.Why should we use Spring Boot Framework?
The dependency injection approach is used in Spring Boot.
It contains powerful database transaction management capabilities.
It simplifies integration with other Java frameworks like JPA/Hibernate ORM, Struts, etc.
It reduces the cost and development time of the application.

3.Advantages of Spring Boot
It creates stand-alone Spring applications that can be started using Java -jar.
It tests web applications easily with the help of different Embedded HTTP servers such as Tomcat, Jetty, etc. We don't need to deploy WAR files.
It provides opinionated 'starter' POMs to simplify our Maven configuration.
It provides production-ready features such as metrics, health checks, and externalized configuration.
There is no requirement for XML configuration.

-->Goals of Spring Boot
The main goal of Spring Boot is to reduce development, unit test, and integration test time.
Provides Opinionated Development approach
Avoids defining more Annotation Configuration
Avoids writing lots of import statements
Avoids XML Configuration.

4.Springboot Architecture:
Presentation Layer
Business Layer
Persistence Layer
Database Layer

Spring Boot is a module of the Spring Framework. It is used to create stand-alone, production-grade Spring Based Applications with minimum 
efforts. It is developed on top of the core Spring Framework.

Presentation Layer: The presentation layer handles the HTTP requests, translates the JSON parameter to object, and authenticates the request
and transfer it to the business layer. In short, it consists of views i.e., frontend part.
Business Layer: The business layer handles all the business logic. It consists of service classes and uses services provided by data access layers. It also performs authorization and validation.

Persistence Layer: The persistence layer contains all the storage logic and translates business objects from and to database rows.

Database Layer: In the database layer, CRUD (create, retrieve, update, delete) operations are performed.

SpringBoot Annotations:
annotations are used to provide supplemental information about a program. It is not a part of the application that we develop. It does not 
have a direct effect on the operation of the code they annotate. It does not change the action of the compiled program.

Core Spring Framework Annotations:
1.@Required: It applies to the bean setter method. It indicates that the annotated bean must be populated at configuration time with the 
required property, else it throws an exception BeanInitilizationException.

2.@Autowired: Spring provides annotation-based auto-wiring by providing @Autowired annotation. It is used to autowire spring bean on setter 
methods, instance variable, and constructor. When we use @Autowired annotation, the spring container auto-wires the bean by matching
data-type.

3.@Configuration: It is a class-level annotation. The class annotated with @Configuration used by Spring Containers as a source of 
bean definitions.

4.@ComponentScan: It is used when we want to scan a package for beans. It is used with the annotation @Configuration. We can also specify
the base packages to scan for Spring Components.

5.@Bean: It is a method-level annotation. It is an alternative of XML <bean> tag. It tells the method to produce 
a bean to be managed by Spring Container.

Spring Framework Stereotype Annotations//same types of annotations
1.@Component: It is a class-level annotation. It is used to mark a Java class as a bean. A Java class annotated with @Component is found
during the classpath.The Spring Framework pick it up and configure it in the application context as a Spring Bean.
2.@Controller: The @Controller is a class-level annotation. It is a specialization of @Component. It marks a class as a web request handler. 
It is often used to serve web pages. By default, it returns a string that indicates which route to redirect. It is mostly used with 
@RequestMapping annotation.
3.@Service: It is also used at class level. It tells the Spring that class contains the business logic.
4.@Repository: It is a class-level annotation. The repository is a DAOs (Data Access Object) that access the database directly.
The repository does all the operations related to the database.

Spring Boot Annotations
@EnableAutoConfiguration: It auto-configures the bean that is present in the classpath and configures it to run the methods. 
The use of this annotation is reduced in Spring Boot 1.2.0 release because developers provided an alternative of the annotation, 
i.e. @SpringBootApplication.
@SpringBootApplication: It is a combination of three annotations @EnableAutoConfiguration, @ComponentScan, and @Configuration.


Difference between spring vs spring boot
spring
1.Spring Framework is a widely used Java EE framework for building applications.
2.The primary feature of the Spring Framework is dependency injection.
3.It helps to make things simpler by allowing us to develop loosely coupled applications.
4.It does not provide support for an in-memory database.

spring boot
1.Spring Boot Framework is widely used to develop REST APIs.
2.The primary feature of Spring Boot is Autoconfiguration. It automatically configures the classes based on the requirement.
3.It helps to create a stand-alone application with less configuration.
4.It offers several plugins for working with an embedded and in-memory database such as H2.


keywords for annotations:
1.@Required: It applies to the bean setter method. 
2.@Autowired:autowire spring bean on setter methods, instance variable, and constructor. When we use @Autowired annotation, 
the spring container auto-wires the bean by matching data-type.
3.@Configuration: It is a class-level annotation. The class annotated with @Configuration used by Spring Containers as a source 
of bean definitions.
4.@ComponentScan: It is used when we want to scan a package for beans. 
5.@Bean: It is a method-level annotation. It is an alternative of XML <bean> tag. It tells the method to produce a bean to be managed
 by Spring Container.
 
spring boot starters:
Spring Boot provides a number of starters that allow us to add jars in the classpath. Spring Boot built-in starters make development easier
and rapid. Spring Boot Starters are the dependency descriptors.
For example, if we want to use Spring and JPA for database access, we need to include the spring-boot-starter-data-jpa dependency
in our pom.xml file of the project.

'starter' -h2 database,jpa, spring boot actuator,Devtools, spring web.

spring boot dependency:
->Spring Boot manages dependencies and configuration automatically. 
->Spring Boot upgrades all dependencies automatically in a consistent way when we update the Spring Boot version.

SB Application properties:
 src/main/resources folder
 We can set a property(s) for the Spring Boot application. Spring Boot also allows us to define our own property if required.
 The application.properties file allows us to run an application in a different environment. 
 ->we have configured the application name and port. The port 8081 denotes that the application runs on port 8081.
 
Aspect-oriented Programming (AOP):
Web Layer: It exposes the services using the REST or web application.
Business Layer: It implements the business logic of an application.
Data Layer: It implements the persistence logic of the application.

The responsibility of each layer is different, but there are a few common aspects that apply to all layers are Logging, Security, 
validation, caching, etc. These common aspects are called cross-cutting concerns.

 Aspect: A code unit that encapsulates pointcuts, advices, and attributes.
 Pointcut: It defines the set of entry points in which advice is executed.
 Advice: It is an implementation of cross-cutting concerns.
 Waver: It constructs code(source or object) with advice.
 
 
 Annotation SpringBoot:
 class-level:@springBoot 
 