1.prepared statement create tbl comment create
2.connection poling
3.transaction management-example program
4.save point

Four drivers:
1.JDBC-ODBC bridge driver(partially written in java)
The JDBC-ODBC bridge driver uses ODBC driver to connect to the database. The JDBC-ODBC bridge driver converts JDBC method calls into the
ODBC function calls. This is now discouraged because of thin driver.
Oracle does not support the JDBC-ODBC Bridge from Java 8. Oracle recommends that you use JDBC drivers provided by the vendor of
your database instead of the JDBC-ODBC Bridge.

2.Native-API driver (partially java driver)
The Native API driver uses the client-side libraries of the database. The driver converts JDBC method calls into native 
calls of the database API. It is not written entirely in java.

3.Network Protocol driver (fully java driver)
The Network Protocol driver uses middleware (application server) that converts JDBC calls directly or indirectly into the vendor-specific 
database protocol.It is fully written in java.

4.Native Protocol  Driver or Thin driver (fully java driver)
The thin driver converts JDBC calls directly into the vendor-specific database protocol. That is why it is known as thin driver.
It is fully written in Java language.


JPA: java persistence API

1.What is jpa:
The Java Persistence API (JPA) is a specification of Java. It is used to persist data between Java object and relational database. 
JPA acts as a bridge between object-oriented domain models and relational database systems.
As JPA is just a specification, it doesn't perform any operation by itself. It requires an implementation. So, ORM tools like Hibernate,
TopLink and iBatis implements JPA specifications for data persistence.

2.JPA Object Relational Mapping
Object Relational Mapping (ORM) is a functionality which is used to develop and maintain a relationship between an object and relational 
database by mapping an object state to database column. It is capable to handle various database operations easily such as inserting, 
updating, deleting etc.

3.Mapping Directions
Mapping Directions are divided into two parts: -

Unidirectional relationship - In this relationship, only one entity can refer the properties to another. It contains only one owing side 
that specifies how an update can be made in the database.
Bidirectional relationship - This relationship contains an owning side as well as an inverse side. So here every entity has a relationship 
field or refer the property to other entity.

4.JPA Entity Introduction
In general, entity is a group of states associated together in a single unit.

5.Entity properties:
Persistability - An object is called persistent if it is stored in the database and can be accessed anytime.

Persistent Identity - In Java, each entity is unique and represents as an object identity. Similarly, when the object identity is
stored in a database then it is represented as persistence identity. This object identity is equivalent to primary key in database.

Transactionality - Entity can perform various operations such as create, delete, update. Each operation makes some changes in the database.
It ensures that whatever changes made in the database either be succeed or failed atomically.

Granuality - Entities should not be primitives, primitive wrappers or built-in objects with single dimensional state.


6.Collection Mapping
A Collection is a java framework that groups multiple objects into a single unit. It is used to store, retrieve and manipulate the aggregate 
data.

In JPA, we can persist the object of wrapper classes and String using collections. JPA allows three kinds of objects to store in mapping 
collections - Basic Types, Entities and Embeddables.



